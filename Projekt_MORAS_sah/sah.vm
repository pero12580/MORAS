function sah.pl 0
push argument 0
pop pointer 0
push this 0
return
function sah.st 0
push argument 0
pop pointer 0
push this 1
return
function sah.checkmate 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 64
lt
push local 0
push this 1
add
pop pointer 1
push that 0
push constant 5
eq
not
and
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push constant 64
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 5
call Output.printInt 1
pop temp 0
push constant 0
not
return
label IF_FALSE0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push constant 64
lt
push local 0
push this 1
add
pop pointer 1
push that 0
push constant 11
eq
not
and
not
if-goto WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 64
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
label IF_FALSE1
push constant 0
return
function sah.move_is_legal 6
push argument 0
pop pointer 0
push argument 1
push constant 1
lt
push argument 1
push constant 8
gt
or
push argument 3
push constant 1
lt
push argument 3
push constant 8
gt
or
or
push argument 2
push constant 1
lt
push argument 2
push constant 8
gt
or
push argument 4
push constant 1
lt
push argument 4
push constant 8
gt
or
or
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
call print.wrong_input 0
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
push constant 1
sub
push argument 2
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
pop local 1
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
push constant 8
call Math.multiply 2
add
pop local 2
push local 2
push this 1
add
pop pointer 1
push that 0
pop local 3
push local 1
push this 0
gt
push constant 6
call Math.multiply 2
push local 1
push this 0
lt
push constant 6
call Math.multiply 2
push constant 7
add
and
push local 3
push constant 0
eq
push local 3
push constant 1
push this 0
sub
push constant 6
call Math.multiply 2
gt
push local 3
push constant 1
push this 0
sub
push constant 6
call Math.multiply 2
push constant 7
add
lt
and
or
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push this 0
push constant 6
call Math.multiply 2
push constant 1
add
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 0
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 1
push constant 1
eq
push argument 1
push argument 3
eq
and
push argument 2
push constant 1
add
push argument 4
eq
push argument 2
push constant 2
eq
push argument 2
push constant 2
add
push argument 4
eq
and
or
and
push local 3
push constant 0
eq
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
not
return
label IF_FALSE4
push local 1
push constant 1
eq
push argument 3
push argument 1
push constant 1
add
eq
push argument 3
push argument 1
push constant 1
sub
eq
or
and
push argument 2
push constant 1
add
push argument 4
eq
and
push local 3
push constant 6
gt
and
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
not
return
label IF_FALSE5
label IF_FALSE3
push this 0
push constant 1
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 1
push constant 7
eq
push argument 1
push argument 3
eq
and
push argument 2
push constant 1
sub
push argument 4
eq
push argument 2
push constant 7
eq
push argument 2
push constant 2
sub
push argument 4
eq
and
or
and
push local 3
push constant 0
eq
and
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
not
return
label IF_FALSE7
push local 1
push constant 7
eq
push argument 3
push argument 1
push constant 1
add
eq
push argument 3
push argument 1
push constant 1
sub
eq
or
and
push argument 2
push constant 1
sub
push argument 4
eq
and
push local 3
push constant 7
lt
and
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 0
not
return
label IF_FALSE8
label IF_FALSE6
call print.pawn_wrong_move 0
pop temp 0
label IF_FALSE2
push local 1
push this 0
push constant 6
call Math.multiply 2
push constant 2
add
eq
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push argument 1
push argument 3
eq
push argument 2
push argument 4
eq
or
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push argument 1
push argument 3
eq
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push argument 2
pop local 0
push argument 4
push argument 2
gt
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push local 0
push constant 1
add
pop local 0
label WHILE_EXP0
push local 0
push argument 4
lt
push argument 1
push constant 1
sub
push local 0
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
label IF_FALSE12
push argument 4
push argument 2
lt
if-goto IF_TRUE13
goto IF_FALSE13
label IF_TRUE13
push local 0
push constant 1
sub
pop local 0
label WHILE_EXP1
push local 0
push argument 4
gt
push argument 1
push constant 1
sub
push local 0
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END1
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP1
label WHILE_END1
label IF_FALSE13
push local 0
push argument 4
eq
if-goto IF_TRUE14
goto IF_FALSE14
label IF_TRUE14
push constant 0
not
return
label IF_FALSE14
label IF_FALSE11
push argument 2
push argument 4
eq
if-goto IF_TRUE15
goto IF_FALSE15
label IF_TRUE15
push argument 1
pop local 0
push argument 3
push argument 1
gt
if-goto IF_TRUE16
goto IF_FALSE16
label IF_TRUE16
push local 0
push constant 1
add
pop local 0
label WHILE_EXP2
push local 0
push argument 3
lt
push local 0
push constant 1
sub
push argument 2
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
label IF_FALSE16
push argument 3
push argument 1
lt
if-goto IF_TRUE17
goto IF_FALSE17
label IF_TRUE17
push local 0
push constant 1
sub
pop local 0
label WHILE_EXP3
push local 0
push argument 3
gt
push local 0
push constant 1
sub
push argument 2
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END3
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP3
label WHILE_END3
label IF_FALSE17
push local 0
push argument 3
eq
if-goto IF_TRUE18
goto IF_FALSE18
label IF_TRUE18
push constant 0
not
return
label IF_FALSE18
label IF_FALSE15
label IF_FALSE10
call print.rook_wrong_move 0
pop temp 0
label IF_FALSE9
push local 1
push this 0
push constant 6
call Math.multiply 2
push constant 3
add
eq
if-goto IF_TRUE19
goto IF_FALSE19
label IF_TRUE19
push constant 8
call Array.new 1
pop local 4
push constant 8
call Array.new 1
pop local 5
push constant 0
push local 4
add
push argument 1
push constant 2
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 4
add
push argument 1
push constant 2
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push local 5
add
push argument 2
push constant 1
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 5
add
push argument 2
push constant 1
add
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 4
add
push argument 1
push constant 2
add
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 4
add
push argument 1
push constant 2
add
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 5
add
push argument 2
push constant 1
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 5
add
push argument 2
push constant 1
add
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 4
add
push argument 1
push constant 1
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 4
add
push argument 1
push constant 1
add
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 5
add
push argument 2
push constant 1
sub
push constant 2
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 5
add
push argument 2
push constant 1
sub
push constant 2
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push local 4
add
push argument 1
push constant 1
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push local 4
add
push argument 1
push constant 1
add
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push local 5
add
push argument 2
push constant 1
sub
push constant 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push local 5
add
push argument 2
push constant 1
sub
push constant 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 0
label WHILE_EXP4
push local 0
push constant 8
lt
not
if-goto WHILE_END4
push local 0
push local 4
add
pop pointer 1
push that 0
push argument 3
push constant 1
sub
eq
push local 0
push local 5
add
pop pointer 1
push that 0
push argument 4
push constant 1
sub
eq
and
if-goto IF_TRUE20
goto IF_FALSE20
label IF_TRUE20
push local 0
call Output.printInt 1
pop temp 0
push constant 0
not
return
label IF_FALSE20
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP4
label WHILE_END4
push local 0
push constant 8
eq
if-goto IF_TRUE21
goto IF_FALSE21
label IF_TRUE21
call print.knight_wrong_move 0
pop temp 0
label IF_FALSE21
label IF_FALSE19
push local 1
push this 0
push constant 6
call Math.multiply 2
push constant 4
add
eq
if-goto IF_TRUE22
goto IF_FALSE22
label IF_TRUE22
push constant 1
pop local 0
push argument 3
push argument 1
gt
push argument 4
push argument 2
lt
and
if-goto IF_TRUE23
goto IF_FALSE23
label IF_TRUE23
label WHILE_EXP5
push argument 1
push local 0
add
push argument 3
lt
push argument 2
push local 0
sub
push argument 4
gt
and
push argument 1
push constant 1
sub
push local 0
add
push argument 2
push constant 1
sub
push local 0
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END5
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP5
label WHILE_END5
push argument 3
push argument 1
push local 0
add
eq
push argument 4
push argument 2
push local 0
sub
eq
and
if-goto IF_TRUE24
goto IF_FALSE24
label IF_TRUE24
push constant 0
not
return
label IF_FALSE24
label IF_FALSE23
push argument 3
push argument 1
gt
push argument 4
push argument 2
gt
and
if-goto IF_TRUE25
goto IF_FALSE25
label IF_TRUE25
label WHILE_EXP6
push argument 1
push local 0
add
push argument 3
lt
push argument 2
push local 0
sub
push argument 4
lt
and
push argument 1
push constant 1
sub
push local 0
add
push argument 2
push constant 1
sub
push local 0
add
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END6
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP6
label WHILE_END6
push argument 3
push argument 1
push local 0
add
eq
push argument 4
push argument 2
push local 0
add
eq
and
if-goto IF_TRUE26
goto IF_FALSE26
label IF_TRUE26
push constant 0
not
return
label IF_FALSE26
label IF_FALSE25
push argument 3
push argument 1
lt
push argument 4
push argument 2
lt
and
if-goto IF_TRUE27
goto IF_FALSE27
label IF_TRUE27
label WHILE_EXP7
push argument 1
push local 0
sub
push argument 3
gt
push argument 2
push local 0
sub
push argument 4
gt
and
push argument 1
push constant 1
sub
push local 0
sub
push argument 2
push constant 1
sub
push local 0
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END7
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP7
label WHILE_END7
push argument 3
push argument 1
push local 0
sub
eq
push argument 4
push argument 2
push local 0
sub
eq
and
if-goto IF_TRUE28
goto IF_FALSE28
label IF_TRUE28
push constant 0
not
return
label IF_FALSE28
label IF_FALSE27
push argument 3
push argument 1
lt
push argument 4
push argument 2
gt
and
if-goto IF_TRUE29
goto IF_FALSE29
label IF_TRUE29
label WHILE_EXP8
push argument 1
push local 0
sub
push argument 3
gt
push argument 2
push local 0
add
push argument 4
lt
and
push argument 1
push constant 1
sub
push local 0
sub
push argument 2
push constant 1
sub
push local 0
add
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END8
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP8
label WHILE_END8
push argument 3
push argument 1
push local 0
sub
eq
push argument 4
push argument 2
push local 0
add
eq
and
if-goto IF_TRUE30
goto IF_FALSE30
label IF_TRUE30
push constant 0
not
return
label IF_FALSE30
label IF_FALSE29
call print.bishop_wrong_move 0
pop temp 0
label IF_FALSE22
push local 1
push this 0
push constant 6
call Math.multiply 2
push constant 5
add
eq
if-goto IF_TRUE31
goto IF_FALSE31
label IF_TRUE31
push constant 8
call Array.new 1
pop local 4
push constant 8
call Array.new 1
pop local 5
push constant 0
push local 4
add
push argument 1
push constant 1
sub
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push local 5
add
push argument 2
push constant 1
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 4
add
push argument 1
push constant 1
sub
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 5
add
push argument 2
push constant 1
sub
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 4
add
push argument 1
push constant 1
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 5
add
push argument 2
push constant 1
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 4
add
push argument 1
push constant 1
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 5
add
push argument 2
push constant 1
sub
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 4
add
push argument 1
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 5
add
push argument 2
push constant 1
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 4
add
push argument 1
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 5
add
push argument 2
push constant 1
sub
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push local 4
add
push argument 1
push constant 1
sub
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push local 5
add
push argument 2
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push local 4
add
push argument 1
push constant 1
sub
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push local 5
add
push argument 2
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 0
label WHILE_EXP9
push local 0
push constant 8
lt
not
if-goto WHILE_END9
push local 0
push local 4
add
pop pointer 1
push that 0
push argument 3
push constant 1
sub
eq
push local 0
push local 5
add
pop pointer 1
push that 0
push argument 4
push constant 1
sub
eq
and
if-goto IF_TRUE32
goto IF_FALSE32
label IF_TRUE32
push constant 0
not
return
label IF_FALSE32
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP9
label WHILE_END9
push local 0
push constant 8
eq
if-goto IF_TRUE33
goto IF_FALSE33
label IF_TRUE33
call print.king_wrong_move 0
pop temp 0
label IF_FALSE33
label IF_FALSE31
push local 1
push this 0
push constant 6
call Math.multiply 2
push constant 6
add
eq
if-goto IF_TRUE34
goto IF_FALSE34
label IF_TRUE34
push argument 1
push argument 3
eq
push argument 2
push argument 4
eq
or
if-goto IF_TRUE35
goto IF_FALSE35
label IF_TRUE35
push argument 1
push argument 3
eq
if-goto IF_TRUE36
goto IF_FALSE36
label IF_TRUE36
push argument 2
pop local 0
push argument 4
push argument 2
gt
if-goto IF_TRUE37
goto IF_FALSE37
label IF_TRUE37
push local 0
push constant 1
add
pop local 0
label WHILE_EXP10
push local 0
push argument 4
lt
push argument 1
push constant 1
sub
push local 0
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END10
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP10
label WHILE_END10
label IF_FALSE37
push argument 4
push argument 2
lt
if-goto IF_TRUE38
goto IF_FALSE38
label IF_TRUE38
push local 0
push constant 1
sub
pop local 0
label WHILE_EXP11
push local 0
push argument 4
gt
push argument 1
push constant 1
sub
push local 0
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END11
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP11
label WHILE_END11
label IF_FALSE38
push local 0
push argument 4
eq
if-goto IF_TRUE39
goto IF_FALSE39
label IF_TRUE39
push constant 0
not
return
label IF_FALSE39
label IF_FALSE36
push argument 2
push argument 4
eq
if-goto IF_TRUE40
goto IF_FALSE40
label IF_TRUE40
push argument 1
pop local 0
push argument 3
push argument 1
gt
if-goto IF_TRUE41
goto IF_FALSE41
label IF_TRUE41
push local 0
push constant 1
add
pop local 0
label WHILE_EXP12
push local 0
push argument 3
lt
push local 0
push constant 1
sub
push argument 2
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END12
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP12
label WHILE_END12
label IF_FALSE41
push argument 3
push argument 1
lt
if-goto IF_TRUE42
goto IF_FALSE42
label IF_TRUE42
push local 0
push constant 1
sub
pop local 0
label WHILE_EXP13
push local 0
push argument 3
gt
push local 0
push constant 1
sub
push argument 2
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END13
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP13
label WHILE_END13
label IF_FALSE42
push local 0
push argument 3
eq
if-goto IF_TRUE43
goto IF_FALSE43
label IF_TRUE43
push constant 0
not
return
label IF_FALSE43
label IF_FALSE40
label IF_FALSE35
push constant 1
pop local 0
push argument 3
push argument 1
gt
push argument 4
push argument 2
lt
and
if-goto IF_TRUE44
goto IF_FALSE44
label IF_TRUE44
label WHILE_EXP14
push argument 1
push local 0
add
push argument 3
lt
push argument 2
push local 0
sub
push argument 4
gt
and
push argument 1
push constant 1
sub
push local 0
add
push argument 2
push constant 1
sub
push local 0
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END14
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP14
label WHILE_END14
push argument 3
push argument 1
push local 0
add
eq
push argument 4
push argument 2
push local 0
sub
eq
and
if-goto IF_TRUE45
goto IF_FALSE45
label IF_TRUE45
push constant 0
not
return
label IF_FALSE45
label IF_FALSE44
push argument 3
push argument 1
gt
push argument 4
push argument 2
gt
and
if-goto IF_TRUE46
goto IF_FALSE46
label IF_TRUE46
label WHILE_EXP15
push argument 1
push local 0
add
push argument 3
lt
push argument 2
push local 0
sub
push argument 4
lt
and
push argument 1
push constant 1
sub
push local 0
add
push argument 2
push constant 1
sub
push local 0
add
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END15
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP15
label WHILE_END15
push argument 3
push argument 1
push local 0
add
eq
push argument 4
push argument 2
push local 0
add
eq
and
if-goto IF_TRUE47
goto IF_FALSE47
label IF_TRUE47
push constant 0
not
return
label IF_FALSE47
label IF_FALSE46
push argument 3
push argument 1
lt
push argument 4
push argument 2
lt
and
if-goto IF_TRUE48
goto IF_FALSE48
label IF_TRUE48
label WHILE_EXP16
push argument 1
push local 0
sub
push argument 3
gt
push argument 2
push local 0
sub
push argument 4
gt
and
push argument 1
push constant 1
sub
push local 0
sub
push argument 2
push constant 1
sub
push local 0
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END16
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP16
label WHILE_END16
push argument 3
push argument 1
push local 0
sub
eq
push argument 4
push argument 2
push local 0
sub
eq
and
if-goto IF_TRUE49
goto IF_FALSE49
label IF_TRUE49
push constant 0
not
return
label IF_FALSE49
label IF_FALSE48
push argument 3
push argument 1
lt
push argument 4
push argument 2
gt
and
if-goto IF_TRUE50
goto IF_FALSE50
label IF_TRUE50
label WHILE_EXP17
push argument 1
push local 0
sub
push argument 3
gt
push argument 2
push local 0
add
push argument 4
lt
and
push argument 1
push constant 1
sub
push local 0
sub
push argument 2
push constant 1
sub
push local 0
add
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
and
not
if-goto WHILE_END17
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP17
label WHILE_END17
push argument 3
push argument 1
push local 0
sub
eq
push argument 4
push argument 2
push local 0
add
eq
and
if-goto IF_TRUE51
goto IF_FALSE51
label IF_TRUE51
push constant 0
not
return
label IF_FALSE51
label IF_FALSE50
call print.queen_wrong_move 0
pop temp 0
label IF_FALSE34
goto IF_END1
label IF_FALSE1
call print.impossible_move 0
pop temp 0
label IF_END1
push constant 0
return
function sah.move 1
push argument 0
pop pointer 0
push constant 1
push this 0
sub
pop this 0
push argument 1
push constant 1
sub
push argument 2
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
pop pointer 1
push that 0
pop local 0
push argument 1
push constant 1
sub
push argument 2
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 1
push constant 1
sub
push argument 2
push constant 1
sub
call pieces.delSq 2
pop temp 0
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.delSq 2
pop temp 0
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
push constant 8
call Math.multiply 2
add
push this 1
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.bPawnDraw 2
pop temp 0
label IF_FALSE0
push local 0
push constant 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.bRookDraw 2
pop temp 0
label IF_FALSE1
push local 0
push constant 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.bKnightDraw 2
pop temp 0
label IF_FALSE2
push local 0
push constant 4
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.bBishopDraw 2
pop temp 0
label IF_FALSE3
push local 0
push constant 5
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.bKingDraw 2
pop temp 0
label IF_FALSE4
push local 0
push constant 6
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.bQueenDraw 2
pop temp 0
label IF_FALSE5
push local 0
push constant 7
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.wPawnDraw 2
pop temp 0
label IF_FALSE6
push local 0
push constant 8
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.wRookDraw 2
pop temp 0
label IF_FALSE7
push local 0
push constant 9
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.wKnightDraw 2
pop temp 0
label IF_FALSE8
push local 0
push constant 10
eq
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.wBishopDraw 2
pop temp 0
label IF_FALSE9
push local 0
push constant 11
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.wKingDraw 2
pop temp 0
label IF_FALSE10
push local 0
push constant 12
eq
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push argument 3
push constant 1
sub
push argument 4
push constant 1
sub
call pieces.wQueenDraw 2
pop temp 0
label IF_FALSE11
push constant 0
return
function sah.starting_pos 1
push constant 2
call Memory.alloc 1
pop pointer 0
push constant 1
pop this 0
call sah.board 0
pop temp 0
push constant 2
push constant 0
call pieces.bBishopDraw 2
pop temp 0
push constant 5
push constant 0
call pieces.bBishopDraw 2
pop temp 0
push constant 1
push constant 0
call pieces.bKnightDraw 2
pop temp 0
push constant 6
push constant 0
call pieces.bKnightDraw 2
pop temp 0
push constant 0
push constant 0
call pieces.bRookDraw 2
pop temp 0
push constant 7
push constant 0
call pieces.bRookDraw 2
pop temp 0
push constant 4
push constant 0
call pieces.bKingDraw 2
pop temp 0
push constant 3
push constant 0
call pieces.bQueenDraw 2
pop temp 0
push constant 0
push constant 7
call pieces.wRookDraw 2
pop temp 0
push constant 7
push constant 7
call pieces.wRookDraw 2
pop temp 0
push constant 1
push constant 7
call pieces.wKnightDraw 2
pop temp 0
push constant 6
push constant 7
call pieces.wKnightDraw 2
pop temp 0
push constant 2
push constant 7
call pieces.wBishopDraw 2
pop temp 0
push constant 5
push constant 7
call pieces.wBishopDraw 2
pop temp 0
push constant 3
push constant 7
call pieces.wQueenDraw 2
pop temp 0
push constant 4
push constant 7
call pieces.wKingDraw 2
pop temp 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 8
lt
not
if-goto WHILE_END0
push local 0
push constant 1
call pieces.bPawnDraw 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push constant 8
lt
not
if-goto WHILE_END1
push local 0
push constant 6
call pieces.wPawnDraw 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 64
call Array.new 1
pop this 1
push constant 0
push this 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 1
add
push constant 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 1
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 1
add
push constant 6
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push this 1
add
push constant 5
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push this 1
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push this 1
add
push constant 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push this 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 56
push this 1
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 57
push this 1
add
push constant 9
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 58
push this 1
add
push constant 10
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 59
push this 1
add
push constant 12
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 60
push this 1
add
push constant 11
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 61
push this 1
add
push constant 10
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 62
push this 1
add
push constant 9
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 63
push this 1
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
pop local 0
label WHILE_EXP2
push local 0
push constant 16
lt
not
if-goto WHILE_END2
push local 0
push this 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
push constant 48
pop local 0
label WHILE_EXP3
push local 0
push constant 56
lt
not
if-goto WHILE_END3
push local 0
push this 1
add
push constant 7
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP3
label WHILE_END3
push pointer 0
return
function sah.board 2
push constant 0
push constant 0
push constant 255
push constant 0
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 0
push constant 0
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 255
push constant 0
push constant 255
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 0
push constant 255
push constant 255
push constant 255
call Screen.drawLine 4
pop temp 0
push constant 0
pop local 0
push constant 31
pop local 1
label WHILE_EXP0
push local 0
push constant 8
lt
not
if-goto WHILE_END0
push local 1
push constant 0
push local 1
push constant 255
call Screen.drawLine 4
pop temp 0
push local 1
push constant 32
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
push constant 31
pop local 1
label WHILE_EXP1
push local 0
push constant 8
lt
not
if-goto WHILE_END1
push constant 0
push local 1
push constant 255
push local 1
call Screen.drawLine 4
pop temp 0
push local 1
push constant 32
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
